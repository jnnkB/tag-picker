<!DOCTYPE html>
<html dir="ltr">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width">
    <title>Tag Picker</title>
    <link href="favicon.ico" rel="shortcut icon">
    <link href="tag-picker.css" rel="stylesheet">
  </head>
  <body>
    <p style="
      background: #ffa;
      border: 1px dashed;
      margin-top: 0;
      padding: .75em 1em;
    ">Like this project? Please support my <a href="https://github.com/mecha-cms">Mecha CMS</a> project too. Thank you!</p>
    <h1>Tag Picker</h1>
    <form method="get" target="_blank">
      <p><input name="tags" type="text" value="foo, bar" id="tags" placeholder="foo, bar, baz"></p>
      <p>Test connection with <code>&lt;label&gt;</code> element: <label for="tags" style="
        cursor: pointer;
        text-decoration: underline;
      ">click here to focus!</label></p>
      <p>Test add and remove methods: 
        <a href="javascript:void(picker.set('wow', null, true).focus());">+wow</a>
        <a href="javascript:void(picker.let('wow').focus());">-wow</a>
      </p>
      <p><button type="submit">Submit</button></p>
    </form>
    <h2>Features</h2>
    <ul>
      <li>Light-weight library. No dependencies. <strong>Tag Picker</strong> uses plain JavaScript language.</li>
      <li>Simple <abbr title="Application Programming Interface">API</abbr>. Easy to learn.</li>
      <li>Care about accessibility. Interacts very well using the keyboard keys. Free from the focus traps.</li>
    </ul>
    <h2>Start</h2>
    <pre><code>&lt;!DOCTYPE html&gt;
&lt;html dir="ltr"&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;link href="<a href="tag-picker.min.css" target="_blank">tag-picker.min.css</a>" rel="stylesheet"&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;p&gt;&lt;input type="text"&gt;&lt;/p&gt;
    &lt;script src="<a href="tag-picker.min.js" target="_blank">tag-picker.min.js</a>"&gt;&lt;/script&gt;
    &lt;script&gt;
    var picker = new TP(document.querySelector('input'));
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
    <h2>Configure</h2>
    <pre><code>var picker = new TP(<var>source</var>, <var>join</var> = ', ');</code></pre>
    <pre><code>var picker = new TP(<var>source</var>, <var>state</var> = {
        alert: true,
        escape: [','],
        join: ', ',
        max: 9999,
        min: 0,
        x: false
    });</code></pre>
    <ul>
      <li><var>source</var> &rarr; The text input element.</li>
      <li><var>join</var> &rarr; Tags joiner for the output value.</li>
      <li><var>state</var> &rarr; The configuration data.</li>
      <li><var>state.alert</var> &rarr; Set to <code>false</code> to disable alert message.</li>
      <li><var>state.escape</var> &rarr; List of characters used to trigger the tag addition.</li>
      <li><var>state.join</var> &rarr; Tags joiner for the output value.</li>
      <li><var>state.max</var> &rarr; Maximum tags allowed.</li>
      <li><var>state.min</var> &rarr; Minimum tags allowed.</li>
      <li><var>state.x</var> &rarr; Set to <code>true</code> to show the &ldquo;remove&rdquo; button.</li>
    </ul>
    <h2>Instance</h2>
    <p>All tag picker instances will be stored in <code>TP.__instance__</code>. To iterate the instances is possible with <code>TP.each()</code>:</p>
    <pre><code>TP.each(function(key) {
    console.log(key);
    console.log(this.source);
});</code></pre>
    <ul>
      <li><var>this</var> &rarr; Refers to the tag picker instance.</li>
      <li><var>key</var> &rarr; Refers to the tag picker target&rsquo;s <code>id</code> or <code>name</code> attribute value, or its current order.</li>
    </ul>
    <h2>Methods and Properties</h2>
    <h3>TP.version</h3>
    <p>Return the tag picker version.</p>
    <h3>TP._</h3>
    <p>Return the tag picker prototypes.</p>
    <h3>TP.I</h3>
    <p>Return the tag picker translation data.</p>
    <h3>TP.i(string, args = [])</h3>
    <p>Print the translation string.</p>
    <h3>picker.state</h3>
    <p>Return the tag picker states.</p>
    <h3>picker.source</h3>
    <p>Return the <code>&lt;input&gt;</code> element.</p>
    <h3>picker.self</h3>
    <p>Return the tag picker element.</p>
    <h3>picker.input</h3>
    <p>Return the content-editable element.</p>
    <h3>picker.output</h3>
    <p>Alias for <code>picker.source</code> property.</p>
    <h3>picker.tags</h3>
    <p>Return the tags data as array.</p>
    <pre><code>console.log(picker.tags);</code></pre>
    <h3>picker.f</h3>
    <p>Set custom tag name filter.</p>
    <pre><code>picker.f = function(name) {
    // Force lower-case letter(s) and trim white-space(s)
    return name.toLowerCase().trim();
};</code></pre>
    <h3>picker.set(name, index, guard = false)</h3>
    <p>Add a new tag.</p>
    <pre><code>picker.set('foo'); // Append a `foo` tag
picker.set('foo', 1); // Insert a `foo` tag exactly at index `1`
picker.set('foo', null, true); // Insert a `foo` tag and enable alert message</code></pre>
    <h3>picker.value(tags)</h3>
    <p>Add multiple tags at once.</p>
    <pre><code>picker.value('foo, bar, baz'); // Add `foo`, `bar` and `baz`
picker.value(""); // Remove all tags</code></pre>
    <h3>picker.get(name)</h3>
    <p>Check the existence of a tag.</p>
    <pre><code>if (null !== picker.get('foo')) { &hellip; }</code></pre>
    <h3>picker.let(name, guard = false)</h3>
    <p>Remove a tag.</p>
    <pre><code>picker.let('foo'); // Remove `foo` tag
picker.let('foo', true); // Remove `foo` tag and enable alert message</code></pre>
    <h3>picker.blur()</h3>
    <p>Blur from the content-editable element.</p>
    <h3>picker.focus()</h3>
    <p>Focus to the content-editable element.</p>
    <h3>picker.click()</h3>
    <p>Click the content-editable element.</p>
    <h3>picker.pop()</h3>
    <p>Convert the tag picker element back to its original <code>&lt;input&gt;</code> element.</p>
    <h2>Hooks</h2>
    <table border="1">
      <thead>
        <tr>
          <th>Name</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><code>blur</code></td>
          <td>Will be triggered after release focus on the tag editor.</td>
        </tr>
        <tr>
          <td><code>change</code></td>
          <td>Will be triggered on every time the tags data is updated.</td>
        </tr>
        <tr>
          <td><code>click</code></td>
          <td>Will be triggered after click on the tag editor.</td>
        </tr>
        <tr>
          <td><code>focus</code></td>
          <td>Will be triggered after focus on the tag editor.</td>
        </tr>
        <tr>
          <td><code>pop</code></td>
          <td>Will be triggered after <code>picker.pop()</code>.</td>
        </tr>
        <tr>
          <td><code>blur.tag</code></td>
          <td>Will be triggered after release focus on a tag item.</td>
        </tr>
        <tr>
          <td><code>click.tag</code></td>
          <td>Will be triggered after click on a tag item.</td>
        </tr>
        <tr>
          <td><code>focus.tag</code></td>
          <td>Will be triggered after focus on a tag item.</td>
        </tr>
        <tr>
          <td><code>get.tag</code></td>
          <td>Will be triggered after <code>picker.get('foo')</code>.</td>
        </tr>
        <tr>
          <td><code>let.tag</code></td>
          <td>Will be triggered after <code>picker.let('foo')</code>.</td>
        </tr>
        <tr>
          <td><code>set.tag</code></td>
          <td>Will be triggered after <code>picker.set('foo')</code>.</td>
        </tr>
      </tbody>
    </table>
    <h3>picker.on(name, fn, id)</h3>
    <p>Add a new hook.</p>
    <pre><code>picker.on('set.tag', function(name, index) {
    alert('name: ' + name + ', index: ' + index);
});

picker.on('set.tag', function(name, index) {
    alert('name: ' + name + ', index: ' + index);
}, 'hook-id'); // With context</code></pre>
    <h3>picker.off(name, id)</h3>
    <p>Remove a hook.</p>
    <pre><code>picker.off('set.tag');
picker.off('set.tag', 'hook-id'); // With context</code></pre>
    <h3>picker.fire(name, lot, id)</h3>
    <p>Trigger hooks.</p>
    <pre><code>picker.fire('set.tag', ['foo', 0]);
picker.fire('set.tag', ['foo', 0], 'hook-id'); // With context</code></pre>
    <h2>Translations</h2>
    <p>Translation data are stored in the <code>TP.I</code> as object:</p>
    <pre><code>console.log(TP.I);</code></pre>
    <p>To print the translation string, use <code>TP.i</code>:</p>
    <pre><code>TP.I['Hi %s!'] = 'Hai %s!';

alert(TP.i('Hi %s!', ['Taufik Nurrohman']));</code></pre>
    <h2>Examples</h2>
    <ul>
      <li><a href="tag-picker.html" target="_blank">No Idea?</a></li>
      <li><a href="tag-picker.value.html" target="_blank">Set Pre-Defined Value</a></li>
      <li><a href="tag-picker.placeholder.html" target="_blank">Set Placeholder</a></li>
      <li><a href="tag-picker.focus.html" target="_blank">Focus State</a></li>
      <li><a href="tag-picker.focus.placeholder.html" target="_blank">Hide Placeholder on Focus</a></li>
      <li><a href="tag-picker.disabled.html" target="_blank">Disabled Input</a></li>
      <li><a href="tag-picker.read-only.html" target="_blank">Read-Only Input</a></li>
      <li><a href="tag-picker.min.html" target="_blank">Limit Minimum Tags</a></li>
      <li><a href="tag-picker.max.html" target="_blank">Limit Maximum Tags</a></li>
      <li><a href="tag-picker.x.html" target="_blank">Enable &ldquo;Remove&rdquo; Button</a></li>
      <li><a href="tag-picker.paste.html" target="_blank">Paste Event</a></li>
      <li><a href="tag-picker.alert.html" target="_blank">Default Alert</a></li>
      <li><a href="tag-picker.alert.false.html" target="_blank">No Alert</a></li>
      <li><a href="tag-picker.alert.function.html" target="_blank">Custom Alert</a></li>
      <li><a href="tag-picker.escape.html" target="_blank">Disable Characters with <code>picker.state.escape</code></a></li>
      <li><a href="tag-picker.f.html" target="_blank">Filter Characters with <code>picker.f</code></a></li>
      <li><a href="tag-picker.i.html" target="_blank">Translations</a></li>
      <li><a href="tag-picker.directory.html" target="_blank">Directory (Experiment)</a></li>
    </ul>
    <script src="tag-picker.js"></script>
    <script>
    var picker = new TP(document.querySelector('form').tags);
    </script>
  </body>
</html>